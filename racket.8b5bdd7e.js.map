{"mappings":"yiCAAA,aACA,IAAIA,EAAkBC,EAAQ,eAI9B,SAASC,EAAOC,GACdA,EAAMC,SAASJ,GACfG,EAAME,UAAUH,OAASC,EAAME,UAAUC,OAAO,SAAU,CACxD,mBAAoB,CAGlBC,QAAO,qCACPC,YAAY,KAGhBL,EAAME,UAAUI,aAAa,SAAU,SAAU,CAC/CC,KAAM,CACJH,QAAO,YACPI,QAAQ,EACRC,MAAO,aAGXT,EAAME,UAAUQ,IAAMV,EAAME,UAAUH,M,CApBxCY,EAAOC,QAAUb,EACjBA,EAAOc,YAAc,SACrBd,EAAOe,QAAU,CAAC,M","sources":["node_modules/refractor/lang/racket.js"],"sourcesContent":["'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = racket\nracket.displayName = 'racket'\nracket.aliases = ['rkt']\nfunction racket(Prism) {\n  Prism.register(refractorScheme)\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  })\n  Prism.languages.rkt = Prism.languages.racket\n}\n"],"names":["refractorScheme","require","racket","Prism","register","languages","extend","pattern","lookbehind","insertBefore","lang","greedy","alias","rkt","module","exports","displayName","aliases"],"version":3,"file":"racket.8b5bdd7e.js.map"}
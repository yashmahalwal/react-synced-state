{"mappings":"yiCAAA,aAKA,SAASA,EAAKC,GACV,IACIC,IACF,qFAqDDD,EApDKE,UAAUH,KAAO,CACrBI,QAAO,MACPC,OAAQ,CACNC,QAAO,wBACPC,QAAQ,EACRC,OAAQ,CACNC,YAAW,WAGfC,MAAO,CACLJ,QAAO,iDACPK,MAAO,UAETC,SAAU,CACRN,QAAO,mEAEPK,MAAO,UAETE,WAAY,CACVP,QAAO,6BACPQ,YAAY,EACZH,MAAO,YAETI,WAAY,CACVT,QAAO,iDACPQ,YAAY,EACZH,MAAO,UACPH,OAAQ,CACNC,YAAW,QAGf,YAAa,CACXH,QAASU,OACP,kBAAoBd,EAAY,KAAOA,EAAY,eACnD,KAEFY,YAAY,EACZH,MAAO,CAAC,OAAQ,YAChBH,OAAQ,CACNC,YAAW,QAGfQ,KAAM,CACJX,QAAO,uCACPQ,YAAY,EACZN,OAAQ,CACNC,YAAW,QAGfS,SAAQ,UACRT,YAAW,W,CAzDjBU,EAAOC,QAAUpB,EACjBA,EAAKqB,YAAc,OACnBrB,EAAKsB,QAAU,E","sources":["node_modules/refractor/lang/abnf.js"],"sourcesContent":["'use strict'\n\nmodule.exports = abnf\nabnf.displayName = 'abnf'\nabnf.aliases = []\nfunction abnf(Prism) {\n  ;(function (Prism) {\n    var coreRules =\n      '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)'\n    Prism.languages.abnf = {\n      comment: /;.*/,\n      string: {\n        pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n        greedy: true,\n        inside: {\n          punctuation: /^%[is]/\n        }\n      },\n      range: {\n        pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n        alias: 'number'\n      },\n      terminal: {\n        pattern:\n          /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n        alias: 'number'\n      },\n      repetition: {\n        pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      definition: {\n        pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,\n        lookbehind: true,\n        alias: 'keyword',\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      'core-rule': {\n        pattern: RegExp(\n          '(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])',\n          'i'\n        ),\n        lookbehind: true,\n        alias: ['rule', 'constant'],\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      rule: {\n        pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      operator: /=\\/?|\\//,\n      punctuation: /[()\\[\\]]/\n    }\n  })(Prism)\n}\n"],"names":["abnf","Prism1","coreRules","languages","comment","string","pattern","greedy","inside","punctuation","range","alias","terminal","repetition","lookbehind","definition","RegExp","rule","operator","module","exports","displayName","aliases"],"version":3,"file":"abnf.68de4e35.js.map"}
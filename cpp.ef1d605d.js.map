{"mappings":"yiCAAA,aACA,IAAIA,EAAaC,EAAQ,UAIzB,SAASC,EAAIC,GAET,IAAUC,EACNC,EAEAC,EAJNH,EAAMI,SAASP,GACHI,EA8GTD,EA7GGE,EAAO,osBAEPC,EAAU,uCAAuCE,OAAOC,QAAO,cAEjE,WACE,OAAOJ,EAAQG,M,IAGnBJ,EAAMM,UAAUR,IAAME,EAAMM,UAAUC,OAAO,IAAK,CAChD,aAAc,CACZ,CACEC,QAASC,OACP,gEAAgEL,OAAOC,QAAO,cAE5E,WACE,OAAOJ,EAAQG,M,KAIrBM,YAAY,G,uIAWhBT,QAASA,EACTU,OAAQ,CACNH,QAAO,iJAEPI,QAAQ,GAEVC,SAAQ,yHAERC,QAAO,uBAETd,EAAMM,UAAUS,aAAa,MAAO,SAAU,CAC5CC,OAAQ,CAENR,QAASC,OACP,2BAA2BL,OACzB,MACA,mDAAmDA,OACnD,IACA,kDAAkDA,OAAOC,QAAO,eAE9D,WACE,OAAOH,C,IAGX,KAEJQ,YAAY,EACZE,QAAQ,EACRK,OAAQ,CACNC,OAAM,eACNL,SAAQ,IACRM,YAAW,OAGf,aAAc,CACZX,QAAO,oCACPY,MAAO,SACPR,QAAQ,KAGZZ,EAAMM,UAAUS,aAAa,MAAO,UAAW,CAC7C,mBAAoB,CAClBP,QAAO,8DACPS,OAAQ,CACNI,SAAQ,OACRC,QAAS,CACPd,QAAO,WACPY,MAAO,aACPH,OAAQjB,EAAMM,UAAUR,SAKhCE,EAAMM,UAAUS,aAAa,MAAO,WAAY,CAC9C,eAAgB,CACdP,QAAO,KACPY,MAAO,iBAGXpB,EAAMM,UAAUS,aAAa,MAAO,aAAc,CAGhD,cAAe,CACbP,QAAO,6EAEPE,YAAY,EACZE,QAAQ,EACRK,OAAQjB,EAAMM,UAAUC,OAAO,MAAO,OAG1CP,EAAMM,UAAUS,aACd,SACA,eACA,CAEE,aAAY,2BAEdf,EAAMM,UAAUR,IAAI,e,CAjH1BkB,EAAOO,QAAUzB,EACjBA,EAAI0B,YAAc,MAClB1B,EAAI2B,QAAU,E","sources":["node_modules/refractor/lang/cpp.js"],"sourcesContent":["'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = cpp\ncpp.displayName = 'cpp'\ncpp.aliases = []\nfunction cpp(Prism) {\n  Prism.register(refractorC)\n  ;(function (Prism) {\n    var keyword =\n      /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(\n      /<keyword>/g,\n      function () {\n        return keyword.source\n      }\n    )\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(\n              /<keyword>/g,\n              function () {\n                return keyword.source\n              }\n            )\n          ),\n          lookbehind: true\n        }, // This is intended to capture the class name of method implementations like:\n        //   void foo::bar() const {}\n        // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n        // it starts with an uppercase letter. This approximation should give decent results.\n        /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n        //   Foo::~Foo() {}\n        /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n        // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n        /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n      ],\n      keyword: keyword,\n      number: {\n        pattern:\n          /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator:\n        />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      boolean: /\\b(?:false|true)\\b/\n    })\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(\n          /(\\b(?:import|module)\\s+)/.source +\n            '(?:' + // header-name\n            /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\n            '|' + // module name or partition or both\n            /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(\n              /<mod-name>/g,\n              function () {\n                return modName\n              }\n            ) +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern:\n          /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'double-colon',\n      {\n        // All untokenized words that are not namespaces should be class names\n        'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n      },\n      Prism.languages.cpp['base-clause']\n    )\n  })(Prism)\n}\n"],"names":["refractorC","require","cpp","Prism1","Prism","keyword","modName","register","source","replace","languages","extend","pattern","RegExp","lookbehind","number","greedy","operator","boolean","insertBefore","module","inside","string","punctuation","alias","function","generic","exports","displayName","aliases"],"version":3,"file":"cpp.ef1d605d.js.map"}
{"mappings":"yiCAAA,aACA,IAAIA,EAA4BC,EAAQ,0BAIxC,SAASC,EAAIC,GACXA,EAAMC,SAASJ,GACb,SAAUK,GAMV,IAHA,IAAIC,EACF,iGACGC,OACIC,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAWA,EAASG,QAAO,WAAY,WACrC,OAAOH,C,IAGXA,EAAWA,EAASG,QAAO,UAAY,UAAUF,QACjD,IAAIG,EAAM,CACRC,QAAO,kBACPC,OAAQ,CACN,CAEEC,QAAO,iCACPC,QAAQ,GAEV,CACED,QAASE,OACP,+DAA+DR,OAAOE,QAAO,WAE3E,WACE,OAAOH,C,KAIbQ,QAAQ,EACRE,OAAQ,CACNC,cAAe,CACbJ,QAASE,OACP,oDAAoDR,OAAOE,QAAO,WAEhE,WACE,OAAOH,C,KAIbY,YAAY,EACZF,OAAQ,CACN,4BAA6B,CAC3BH,QAAO,YACPM,MAAO,eAETC,KAAM,UAMhBC,QAAO,aACPC,QAAO,qBACP,mBAAoB,CAClBT,QAAO,uBACPK,YAAY,EACZC,MAAO,YAETI,SAAQ,iBACRC,OAAM,oBACNC,SAAQ,4EAERC,YAAW,iBAEbhB,EAAIE,OAAO,GAAGI,OAAOC,cAAcD,OAAOI,KAAOV,EACjDL,EAAMsB,UAAUzB,IAAM,CACpB,cAAe,CAEbW,QAAO,eACPM,MAAO,WAET,gBAAiB,CACfN,QAAO,cACPG,OAAQ,CACNY,UAAW,CACTf,QAAO,uBACPK,YAAY,EACZC,MAAO,WAETO,YAAW,cACXG,QAAS,CACPhB,QAAO,eACPM,MAAO,MACPH,OAAQN,KAId,oBAAqB,CACnBG,QAAO,kBACPG,OAAQ,CACNU,YAAW,YACXG,QAAS,CACPhB,QAAO,eACPM,MAAO,MACPH,OAAQN,MAKhBL,EAAMyB,MAAMC,IAAI,mBAAmB,SAAUC,GAE3C,IAAInB,EAAUE,OACZ,mEAAmER,OAAOE,QAAO,WAE/E,WACE,OAAOH,C,IAGX,MAEFD,EAAMsB,UAAU,qBAAqBM,kBACnCD,EACA,MACAnB,E,IAGJR,EAAMyB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1C3B,EAAMsB,UAAU,qBAAqBO,qBAAqBF,EAAK,M,GAElE,CAxHC,CAwHC7B,E,CA7HLgC,EAAOC,QAAUlC,EACjBA,EAAImC,YAAc,MAClBnC,EAAIoC,QAAU,E","sources":["node_modules/refractor/lang/ftl.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ftl\nftl.displayName = 'ftl'\nftl.aliases = []\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR =\n      /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/\n        .source\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR\n      })\n    }\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [\n        {\n          // raw string\n          pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(\n              /<expr>/g,\n              function () {\n                return FTL_EXPR\n              }\n            )\n          ),\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: RegExp(\n                /((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(\n                  /<expr>/g,\n                  function () {\n                    return FTL_EXPR\n                  }\n                )\n              ),\n              lookbehind: true,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: 'punctuation'\n                },\n                rest: null\n              }\n            }\n          }\n        }\n      ],\n      keyword: /\\b(?:as)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b\\w+(?=\\s*\\()/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      operator:\n        /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    }\n    ftl.string[1].inside.interpolation.inside.rest = ftl\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      // eslint-disable-next-line regexp/no-useless-lazy\n      var pattern = RegExp(\n        /<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(\n          /<expr>/g,\n          function () {\n            return FTL_EXPR\n          }\n        ),\n        'gi'\n      )\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ftl',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl')\n    })\n  })(Prism)\n}\n"],"names":["refractorMarkupTemplating","require","ftl","Prism1","register","Prism","FTL_EXPR","source","i","replace","ftl1","comment","string","pattern","greedy","RegExp","inside","interpolation","lookbehind","alias","rest","keyword","boolean","function","number","operator","punctuation","languages","directive","content","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases"],"version":3,"file":"ftl.fa5f5c41.js.map"}
{"mappings":"yiCAAA,aAKA,SAASA,EAAKC,IACV,SAAUC,GACVA,EAAMC,UAAUH,KAAOE,EAAMC,UAAUC,OAAO,MAAO,CAEnDC,QAAS,CACPC,QAAO,gDACPC,YAAY,EACZC,QAAQ,KAGZN,EAAMC,UAAUM,aAAa,OAAQ,SAAU,CAE7C,cAAe,CAEbH,QAAO,sBACPE,QAAQ,EACRE,OAAQ,CACNC,OAAM,8BAILT,EAAMC,UAAUH,KAAKW,OAC5B,IAAIC,EAAQ,yBACRC,EAAW,C,2CAEb,CACEP,QAAO,cACPC,YAAY,IAGhBL,EAAMC,UAAUM,aAAa,OAAQ,WAAY,CAE/C,gBAAiB,CACfH,QAAO,eACPE,QAAQ,EACRE,OAAQ,CACNI,YAAW,IACXF,SAAUA,EACVC,SAAUA,IAId,gBAAiB,CACfP,QAAO,qCACPE,QAAQ,EACRE,OAAQ,CACNK,SAAU,C,kBAER,CACET,QAAO,aACPC,YAAY,IAGhBO,YAAW,IACXF,SAAUA,EACVC,SAAUA,EACVG,UAAWd,EAAMC,UAAUH,KAAKgB,qBAI/Bd,EAAMC,UAAUH,KAAKe,gBACrBb,EAAMC,UAAUH,KAAKgB,UAE5Bd,EAAMC,UAAUM,aAAa,OAAQ,cAAe,CAClDQ,SAAU,CACRX,QAAO,yHAEPC,YAAY,EACZC,QAAQ,IAGb,CAtEC,CAsECP,E,CA1ELiB,EAAOC,QAAUnB,EACjBA,EAAKoB,YAAc,OACnBpB,EAAKqB,QAAU,E","sources":["node_modules/refractor/lang/sass.js"],"sourcesContent":["'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n      {\n        pattern: /(\\s)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern:\n          /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n"],"names":["sass","Prism1","Prism","languages","extend","comment","pattern","lookbehind","greedy","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector","module","exports","displayName","aliases"],"version":3,"file":"sass.79d73d65.js.map"}
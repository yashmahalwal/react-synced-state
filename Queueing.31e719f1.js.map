{"mappings":"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","sources":["docs-source/Pages/MainConcepts/Queueing.tsx","docs-source/CodeSamples/QueueDemo/index.tsx","docs-source/CodeSamples/QueueDemo/QueueDemo.tsx"],"sourcesContent":["import Typography from \"@mui/material/Typography\";\nimport React from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport CodePreview from \"../../components/code/CodePreview\";\nimport QueueDemo, { SourceCode } from \"../../CodeSamples/QueueDemo\";\nimport PageWithContent from \"../../components/layouts/PageWithContent\";\nimport { Pages } from \"../../navigationData/pages\";\n\nexport default function Queueing() {\n  const theme = useTheme();\n\n  return (\n    <PageWithContent\n      title={\"Queueing state updates\"}\n      content={\n        <>\n          <Typography variant={\"body1\"}>\n            This hook works by queueing all your state updates at a global level. That is how it is able to process the\n            state updates one by one. This section explains how you can queue state updates and determine the output of\n            the hook without running into unexpected bugs.\n          </Typography>\n\n          <section style={{ marginTop: theme.spacing(4) }}>\n            <Typography gutterBottom variant={\"h5\"} fontWeight={\"bold\"} component={\"h2\"}>\n              Entering and leaving the queue\n            </Typography>\n            <article>\n              <Typography variant={\"body1\"} gutterBottom>\n                To add a state update to queue, you set a <code>truthy</code> state value. To remove a state update from\n                queue, you set a <code>falsy</code> state value. This process works on two levels - global level and the\n                hook level. You can also replace the <code>truthy</code> & <code>falsy</code> check with your own custom\n                check.\n              </Typography>\n              <CodePreview sourceCode={SourceCode}>\n                <QueueDemo />\n              </CodePreview>\n              <section>\n                <Typography variant={\"h6\"} component={\"h3\"} gutterBottom>\n                  Global level\n                </Typography>\n                <ol>\n                  <li>\n                    When state transitions from a <code>falsy</code> to a <code>truthy</code>, a unique ID is added the\n                    to global queue. This is to keep track of your transition request from a <code>falsy</code> state to\n                    a <code>truthy</code> state.\n                  </li>\n                  <li>\n                    Whenever the queue changes, front of queue is calculated. The hook that requested this transition is\n                    given a go ahead to set a <code>truthy</code> value. All the other transitions everywhere else are\n                    blocked on hook level.\n                  </li>\n                  <li>\n                    When the hook transitions to a <code>falsy</code> value, its ID is removed from the queue and next\n                    entry comes to the front\n                  </li>\n                  <li>\n                    It is important to remember that generated ID tracks the transition between <code>truthy</code>\n                    and <code>falsy</code>. So changing from a <code>truthy</code> value to another <code>truthy</code>{\" \"}\n                    value will have no effect in the queue. Same applies for <code>falsy</code> values.{\" \"}\n                  </li>\n                </ol>\n              </section>\n              <section>\n                <Typography\n                  variant={\"h6\"}\n                  component={\"h3\"}\n                  gutterBottom\n                  sx={{ marginTop: (theme) => theme.spacing(1) }}\n                >\n                  Hook level\n                </Typography>\n                <ol>\n                  <li>\n                    The hook has maintains two values. First one is the current state value. This value is updated\n                    normally with <code>setState</code> calls and is available as the third return value of the hook.\n                    The second one is a cached value that we call <code>oldStateValue</code>. This is the latest{\" \"}\n                    <code>falsy</code> value passed to the hook.\n                  </li>\n                  <li>\n                    What is returned from the hook depends on the global queue. If the hook&apos;s transition request is\n                    at the front of the queue, current state is returned. Otherwise we return the cached{\" \"}\n                    <code>falsy</code> value.\n                  </li>\n                </ol>\n              </section>\n            </article>\n          </section>\n          <section style={{ marginTop: theme.spacing(4) }}>\n            <Typography gutterBottom variant={\"h5\"} fontWeight={\"bold\"} component={\"h1\"}>\n              Edge cases\n            </Typography>\n            <article>\n              <Typography variant={\"body1\"}>\n                Now we cover some edge cases with queueing so as to provider a better idea your updates are handled.\n              </Typography>\n              <ol>\n                <li>\n                  If the hook has a <code>truthy</code> initial value, then the entry is made to the queue as soon as\n                  the hook mounts. This is done as it is natural to want this initial value to block other transitions\n                  across the app. <code>oldStateValue</code> is set to the initial value by default. So even when it is\n                  not this hook&apos;s turn at the front of the queue, it will still return that truthy value. Avoid\n                  passing <code>truthy</code> initial value to avoid bugs.\n                </li>\n                <li>\n                  If the state value is set to <code>falsy</code>, return value is immediately updated to this value. If\n                  you set a series of <code>falsy</code> values one after the another, those will be reflected at the\n                  same time in return value.\n                </li>\n                <li>\n                  If the ID is at the front of queue (current state must be <code>truthy</code>) and you update the\n                  state to another truthy value, return value is immediately updated to the new value. If you set a\n                  series of <code>truthy</code> values one after the another, those will be reflected at the same time\n                  in return value.\n                </li>\n                <li>\n                  If the ID is not at the front of queue but current state is <code>truthy</code>,{\" \"}\n                  <code>oldStateValue</code> is returned. Even if you keep on updating to other <code>truthy</code>{\" \"}\n                  values, the <code>last falsy value</code> will be returned. When the ID goes to the front of the\n                  queue, the latest truthy value will be returned\n                </li>\n                <li>If the ID is in queue and the component unmounts, ID is removed from the queue.</li>\n              </ol>\n            </article>\n          </section>\n        </>\n      }\n      previousLink={Pages.MainConcepts.Index}\n      nextLink={Pages.MainConcepts.Priority}\n    />\n  );\n}\n","export { default, __sourceCode as SourceCode } from \"./QueueDemo\";\n\ndeclare module \"./QueueDemo\" {\n  export const __sourceCode: string;\n}\n","import React, { useCallback, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { useSyncedState } from \"../../../src\";\nimport { Typography } from \"@mui/material\";\n\nexport default function QueueDemo() {\n  const [syncedState1, setSyncedState1] = useSyncedState(false);\n  const [syncedState2, setSyncedState2] = useSyncedState(false);\n  const [syncedState3, setSyncedState3] = useSyncedState(false);\n  const [state1, setState1] = useState(false);\n  const [state2, setState2] = useState(false);\n  const [state3, setState3] = useState(false);\n\n  const [queue, setQueue] = useState<number[]>([]);\n\n  const manageQueue = useCallback((entry: number, enter: boolean) => {\n    if (enter) {\n      setQueue((q) => (q.includes(entry) ? q : [...q, entry]));\n    } else {\n      setQueue((q) => q.filter((e) => e !== entry));\n    }\n  }, []);\n\n  return (\n    <Box\n      display={\"flex\"}\n      alignItems={\"center\"}\n      flex={1}\n      justifyContent={\"space-around\"}\n      sx={{\n        flexDirection: {\n          xs: \"column\",\n          md: \"row\",\n        },\n      }}\n    >\n      <Box>\n        <Typography variant={\"h3\"} component={\"p\"}>\n          Queue: [{queue.join(\", \")}]\n        </Typography>\n      </Box>\n      <Box>\n        <FormGroup>\n          <FormControlLabel\n            label={`State 1`}\n            control={\n              <>\n                <Checkbox\n                  checked={state1}\n                  onChange={(e) => {\n                    setSyncedState1(e.target.checked);\n                    setState1(e.target.checked);\n                    manageQueue(1, e.target.checked);\n                  }}\n                />\n              </>\n            }\n          />\n          <FormControlLabel\n            label={`State 2`}\n            control={\n              <Checkbox\n                checked={state2}\n                onChange={(e) => {\n                  setSyncedState2(e.target.checked);\n                  setState2(e.target.checked);\n                  manageQueue(2, e.target.checked);\n                }}\n              />\n            }\n          />\n          <FormControlLabel\n            label={`State 3`}\n            control={\n              <Checkbox\n                checked={state3}\n                onChange={(e) => {\n                  setSyncedState3(e.target.checked);\n                  setState3(e.target.checked);\n                  manageQueue(3, e.target.checked);\n                }}\n              />\n            }\n          />\n        </FormGroup>\n      </Box>\n      <Box>\n        <FormGroup>\n          <FormControlLabel label={`Synced State 1`} control={<Checkbox disabled checked={syncedState1} />} />\n          <FormControlLabel label={`Synced State 2`} control={<Checkbox disabled checked={syncedState2} />} />\n          <FormControlLabel label={`Synced State 3`} control={<Checkbox disabled checked={syncedState3} />} />\n        </FormGroup>\n      </Box>\n    </Box>\n  );\n}\n"],"names":["parcelHelpers","require","_typography","_react","_styles","_codePreview","_queueDemo","_pageWithContent","_pages","theme1","useTheme","_reactDefault","default","createElement","_pageWithContentDefault","title","content","Fragment","_typographyDefault","variant","style","marginTop","spacing","gutterBottom","fontWeight","component","_codePreviewDefault","sourceCode","SourceCode","_queueDemoDefault","sx","theme","previousLink","Pages","MainConcepts","Index","nextLink","Priority","export","exports","__sourceCode","_box","_checkbox","_formGroup","_formControlLabel","_src","_material","syncedState1","setSyncedState1","useSyncedState","syncedState2","setSyncedState2","syncedState3","setSyncedState3","state1","setState1","useState","state2","setState2","state3","setState3","queue","setQueue","manageQueue","useCallback","entry","enter","q","includes","filter","e","_boxDefault","display","alignItems","flex","justifyContent","flexDirection","xs","md","Typography","join","_formGroupDefault","_formControlLabelDefault","label","control","_checkboxDefault","checked","onChange","target","disabled"],"version":3,"file":"Queueing.31e719f1.js.map"}
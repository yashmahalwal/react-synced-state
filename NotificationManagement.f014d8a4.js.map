{"mappings":"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","sources":["docs-source/Pages/Examples/NotificationManagement.tsx","docs-source/CodeSamples/Examples/NotificationManagementSystem/index.tsx","docs-source/CodeSamples/Examples/NotificationManagementSystem/NotificationManagementSystem.tsx"],"sourcesContent":["import Typography from \"@mui/material/Typography\";\nimport React from \"react\";\nimport CodePreview from \"../../components/code/CodePreview\";\nimport NotificationManagementSystem, { SourceCode } from \"../../CodeSamples/Examples/NotificationManagementSystem\";\nimport Box from \"@mui/material/Box\";\nimport PageWithContent from \"../../components/layouts/PageWithContent\";\nimport { Pages } from \"../../navigationData/pages\";\n\nexport default function NotificationManagement() {\n  return (\n    <PageWithContent\n      title={\"Notification Management System\"}\n      content={\n        <section>\n          <article>\n            <Typography variant={\"body1\"} gutterBottom>\n              Welcome to our amazing notification system. With this example, you&apos;ll get a taste of how easy it is\n              to manage notifications using <code>useSyncedState</code>. We&apos;ve created three notifications with\n              increasing priorities, so you can see the difference in the behavior of notifications based on their\n              priorities. You&apos;ll also see three toggle switches that allow you to block notifications with a\n              certain priority level and lower.\n            </Typography>\n            <Typography variant={\"body1\"} gutterBottom>\n              So go ahead, play with the toggles, and see how the notifications react to your changes! And remember,\n              with react-synced-state, you&apos;re always in control. Enjoy!\n            </Typography>\n            <CodePreview sourceCode={SourceCode}>\n              <NotificationManagementSystem />\n            </CodePreview>\n          </article>\n          <article>\n            <Box marginTop={2}>\n              <Typography variant={\"body1\"} gutterBottom>\n                If you look at the code carefully, we have 2 different sets of synced state hooks (priorities are\n                relative to <code>defaultPriority</code>:\n              </Typography>\n              <ol>\n                <li>\n                  States for notification visible - <code>Layer: default, priority: 1</code>,{\" \"}\n                  <code>Layer: default, priority: 3</code>, <code>Layer: default, priority: 5</code>. These are\n                  synchronised so that only one notification is shown at once\n                </li>\n                <li>\n                  States for blocking notifications - <code>Layer: default, priority: 2</code>,{\" \"}\n                  <code>Layer: default, priority: 4</code>, <code>Layer: default, priority: 6</code>. These are\n                  synchronised on the same layer as notifications. So when a given blocking state is set to true,\n                  notifications with lower priority than this state update are hidden.\n                </li>\n              </ol>\n              <Typography variant={\"body1\"} mt={2} gutterBottom>\n                As a result, this is how the notifications behave:\n              </Typography>\n              <ul>\n                <li>\n                  All the notifications are triggerred together but show up one by one. These notifications have\n                  differing severities (controlled by <code>priority</code> option in the hook)\n                </li>\n                <li>\n                  Notifications can be blocked using toggle switches. When a notification is blocked, it doesn&apos;t\n                  show up on being triggerred. When you unblock the notification from the toggle switch, it shows up.\n                </li>\n                <li>\n                  When a switch toggle is enabled, it schedules a <code>true</code> state update with priority higher\n                  than the corresponding notification. The update will block transition of making notification visible.\n                </li>\n              </ul>\n            </Box>\n          </article>\n        </section>\n      }\n      previousLink={Pages.Examples.Index}\n    />\n  );\n}\n","export { default, __sourceCode as SourceCode } from \"./NotificationManagementSystem\";\n\ndeclare module \"./NotificationManagementSystem\" {\n  export const __sourceCode: string;\n}\n","import React, { useCallback, useState } from \"react\";\nimport { Alert, Snackbar, Switch } from \"@mui/material\";\nimport { defaultPriority, useSyncedState } from \"../../../../src\";\nimport Button from \"@mui/material/Button\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Box from \"@mui/material/Box\";\n\nconst invertFunction = (prev: boolean) => !prev;\nconst NotificationManagementSystem = () => {\n  const [notification1, setNotification1] = useSyncedState(false, {\n    priority: defaultPriority + 1,\n  });\n  const [notification2, setNotification2] = useSyncedState(false, {\n    priority: defaultPriority + 3,\n  });\n  const [notification3, setNotification3] = useSyncedState(false, {\n    priority: defaultPriority + 5,\n  });\n\n  const [, setBlockNotification1] = useSyncedState(false, {\n    priority: defaultPriority + 2,\n  });\n  const [, setBlockNotification2] = useSyncedState(false, {\n    priority: defaultPriority + 4,\n  });\n  const [, setBlockNotification3] = useSyncedState(false, {\n    priority: Infinity,\n  });\n  const [toggle1, setToggle1] = useState(false);\n  const [toggle2, setToggle2] = useState(false);\n  const [toggle3, setToggle3] = useState(false);\n\n  const handleShowNotifications = useCallback(() => {\n    setNotification1(true);\n    setNotification2(true);\n    setNotification3(true);\n  }, [setNotification1, setNotification2, setNotification3]);\n\n  return (\n    <Box>\n      <Snackbar open={notification1}>\n        <Alert variant={\"filled\"} onClose={() => setNotification1(false)} severity=\"success\">\n          Priority 1: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n        </Alert>\n      </Snackbar>\n      <Snackbar open={notification2}>\n        <Alert variant={\"filled\"} onClose={() => setNotification2(false)} severity=\"warning\">\n          Priority 2: Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        </Alert>\n      </Snackbar>\n      <Snackbar open={notification3}>\n        <Alert variant={\"filled\"} onClose={() => setNotification3(false)} severity=\"error\">\n          Priority 3: Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat.\n        </Alert>\n      </Snackbar>\n      <Box display={\"flex\"} alignItems={\"center\"} justifyContent={\"center\"} marginBottom={2}>\n        <Button variant={\"contained\"} onClick={handleShowNotifications}>\n          Show Notifications{\" \"}\n        </Button>\n      </Box>\n      <div>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={toggle1}\n                onChange={() => {\n                  setBlockNotification1(invertFunction);\n                  setToggle1(invertFunction);\n                }}\n              />\n            }\n            label=\"Stop notifications with priority 1 and lower\"\n          />\n        </FormGroup>\n      </div>\n      <div>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={toggle2}\n                onChange={() => {\n                  setBlockNotification2(invertFunction);\n                  setToggle2(invertFunction);\n                }}\n              />\n            }\n            label=\"Stop notifications with priority 2 and lower\"\n          />\n        </FormGroup>\n      </div>\n      <div>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={toggle3}\n                onChange={() => {\n                  setBlockNotification3(invertFunction);\n                  setToggle3(invertFunction);\n                }}\n              />\n            }\n            label=\"Stop all notifications irrespective of priority\"\n          />\n        </FormGroup>\n      </div>\n    </Box>\n  );\n};\n\nexport default NotificationManagementSystem;\n"],"names":["parcelHelpers","require","_typography","_react","_codePreview","_notificationManagementSystem","_box","_pageWithContent","_pages","_reactDefault","default","createElement","_pageWithContentDefault","title","content","_typographyDefault","variant","gutterBottom","_codePreviewDefault","sourceCode","SourceCode","_notificationManagementSystemDefault","_boxDefault","marginTop","mt","previousLink","Pages","Examples","Index","export","exports","__sourceCode","_material","_src","_button","_formGroup","_formControlLabel","invertFunction","prev","notification1","setNotification1","useSyncedState","priority","defaultPriority","notification2","setNotification2","notification3","setNotification3","setBlockNotification1","setBlockNotification2","setBlockNotification3","Infinity","toggle1","setToggle1","useState","toggle2","setToggle2","toggle3","setToggle3","handleShowNotifications","useCallback","Snackbar","open","Alert","onClose","severity","display","alignItems","justifyContent","marginBottom","_buttonDefault","onClick","_formGroupDefault","_formControlLabelDefault","control","Switch","checked","onChange","label"],"version":3,"file":"NotificationManagement.f014d8a4.js.map"}
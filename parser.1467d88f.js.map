{"mappings":"2iCAAA,aAKA,SAASA,EAAOC,GACZ,IAAUC,EACNC,KADMD,EA2ETD,GA1EmBG,UAAUJ,OAASE,EAAME,UAAUC,OAAO,SAAU,CACtEC,QAAS,CACPC,QAAO,+GAEPC,YAAY,GAEdC,SAAU,CACRF,QAAO,4DACPC,YAAY,EACZE,OAAQ,CACNC,YAAW,UAGfC,SAAU,CACRL,QAAO,iDACPC,YAAY,EACZE,OAAQ,CACNJ,QAAS,CACPC,QAAO,oBACPC,YAAY,GAEdG,YAAW,UAGfE,OAAQ,CACNN,QAAO,qCACPO,MAAO,WAETH,YAAW,gBAEbR,EAASD,EAAME,UAAUW,aAAa,SAAU,UAAW,CACzD,iBAAkB,CAChBR,QAAO,UACPC,YAAY,EACZM,MAAO,WAETE,WAAY,CAEVT,QAAO,uDACPU,QAAQ,EACRT,YAAY,EACZE,OAAQ,CACNQ,OAAQ,CACNX,QAAO,2CACPC,YAAY,GAEdF,QAASH,EAAOG,QAChBG,SAAUN,EAAOM,SACjBG,SAAUT,EAAOS,SACjBO,QAAO,qBACPC,OAAM,kDACNP,OAAQV,EAAOU,OACfQ,SAAQ,iGAERV,YAAaR,EAAOQ,gBAI1BT,EAAME,UAAUW,aACd,SACA,cACA,CACEC,WAAYb,EAAOa,WACnBV,QAASH,EAAOG,QAChBG,SAAUN,EAAOM,SACjBG,SAAUT,EAAOS,SACjBC,OAAQV,EAAOU,OACf,qBAAsB,CACpBN,QAASJ,EAAOQ,YAChBG,MAAO,gBAGXX,EAAY,IAAEO,OAAO,c,CA7E3BY,EAAOC,QAAUvB,EACjBA,EAAOwB,YAAc,SACrBxB,EAAOyB,QAAU,E","sources":["node_modules/refractor/lang/parser.js"],"sourcesContent":["'use strict'\n\nmodule.exports = parser\nparser.displayName = 'parser'\nparser.aliases = []\nfunction parser(Prism) {\n  ;(function (Prism) {\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern:\n          /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    }))\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:false|true)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator:\n            /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'punctuation',\n      {\n        expression: parser.expression,\n        keyword: parser.keyword,\n        variable: parser.variable,\n        function: parser.function,\n        escape: parser.escape,\n        'parser-punctuation': {\n          pattern: parser.punctuation,\n          alias: 'punctuation'\n        }\n      },\n      parser['tag'].inside['attr-value']\n    )\n  })(Prism)\n}\n"],"names":["parser","Prism1","Prism","parser1","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator","module","exports","displayName","aliases"],"version":3,"file":"parser.1467d88f.js.map"}
{"mappings":"yiCAAA,aAKA,SAASA,EAAWC,IAChB,SAAUC,GACVA,EAAMC,UAAUH,WAAaE,EAAMC,UAAUC,OAAO,aAAc,CAChE,aAAc,CACZC,QAAO,+KAEPC,YAAY,EACZC,QAAQ,EACRC,OAAQ,MAEVC,QAAO,0FAGTP,EAAMC,UAAUH,WAAWU,QAAQC,KAAI,qLAKhCT,EAAMC,UAAUH,WAAsB,iBACtCE,EAAMC,UAAUH,WAAW,oBAClC,IAAIY,EAAaV,EAAMC,UAAUC,OAAO,aAAc,WAC/CQ,EAAW,cAClBV,EAAMC,UAAUH,WAAW,cAAcQ,OAASI,EAClDV,EAAMC,UAAUU,aAAa,aAAc,WAAY,CACrDC,UAAW,CACTT,QAAO,qBACPG,OAAQ,CACNO,GAAI,CACFV,QAAO,KACPW,MAAO,YAETC,SAAQ,aAGZ,mBAAoB,CAElBZ,QAAO,yGAEPE,QAAQ,EACRC,OAAQ,CACNS,SAAQ,4DACRC,QAAS,CACPb,QAAO,WAEPW,MAAO,aACPR,OAAQI,OAKhBV,EAAMC,UAAUgB,GAAKjB,EAAMC,UAAUH,UACtC,CAlDC,CAkDCC,E,CAtDLmB,EAAOC,QAAUrB,EACjBA,EAAWsB,YAAc,aACzBtB,EAAWuB,QAAU,CAAC,K","sources":["node_modules/refractor/lang/typescript.js"],"sourcesContent":["'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n"],"names":["typescript","Prism1","Prism","languages","extend","pattern","lookbehind","greedy","inside","builtin","keyword","push","typeInside","insertBefore","decorator","at","alias","function","generic","ts","module","exports","displayName","aliases"],"version":3,"file":"typescript.d6e351ad.js.map"}
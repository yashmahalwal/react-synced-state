{"mappings":"yiCAAA,aACA,IAAIA,EAAeC,EAAQ,YACvBC,EAAsBD,EAAQ,mBAIlC,SAASE,EAAIC,GACXA,EAAMC,SAASL,GACfI,EAAMC,SAASH,GACb,SAAUI,GACV,IAAIC,EAAaD,EAAME,KAAKC,MAAMH,EAAMI,UAAUH,YAClDD,EAAMI,UAAUP,IAAMG,EAAMI,UAAUC,OAAO,MAAOJ,UAC7CD,EAAMI,UAAUP,IAAe,iBAC/BG,EAAMI,UAAUP,IAAI,oBAG3B,IAAIS,EAAMN,EAAMI,UAAUP,IAAIS,IAC9BA,EAAIC,QAAUC,OACZ,qBAAqBC,OAAS,MAAQH,EAAIC,QAAQE,OAAS,IAC3DH,EAAIC,QAAQG,OAEdJ,EAAIK,YAAa,CAClB,CAbC,CAaCb,E,CAnBLc,EAAOC,QAAUhB,EACjBA,EAAIiB,YAAc,MAClBjB,EAAIkB,QAAU,E","sources":["node_modules/refractor/lang/tsx.js"],"sourcesContent":["'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx['parameter']\n    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n"],"names":["refractorJsx","require","refractorTypescript","tsx","Prism1","register","Prism","typescript","util","clone","languages","extend","tag","pattern","RegExp","source","flags","lookbehind","module","exports","displayName","aliases"],"version":3,"file":"tsx.2d98a31a.js.map"}
{"mappings":"2iCAAA,aAKA,SAASA,EAASC,IACd,SAAUC,GACVA,EAAMC,UAAUH,SAAWE,EAAMC,UAAUC,OAAO,SAAU,IAC5D,IAAIC,EAAW,CACbC,SAAU,CACRC,QAAO,4GAEPC,YAAY,EACZC,OAAQ,IAEVC,OAAQ,CACNH,QAAO,kBACPI,QAAQ,GAEVC,OAAM,UACNC,QAAO,qBACPC,SAAQ,iEAERC,YAAW,gBAEbV,EAASC,SAASG,OAAS,CACzBC,OAAQL,EAAiB,OACzBW,SAAU,CACRT,QAAO,4BACPC,YAAY,GAEdI,OAAQP,EAAiB,OACzBQ,QAASR,EAAkB,QAC3BU,YAAaV,EAAsB,aAErCH,EAAMC,UAAUc,aAAa,WAAY,UAAW,CAClDC,SAAU,CACRX,QAAO,8BACPC,YAAY,EACZG,QAAQ,EACRF,OAAQ,CACNM,YAAW,kBAGf,mBAAoB,CAClB,CACER,QAAO,0BACPC,YAAY,EACZG,QAAQ,EACRQ,MAAO,WAET,CACEZ,QAAO,gBACPC,YAAY,EACZG,QAAQ,EACRQ,MAAO,YAGXC,UAAW,CACTb,QAAO,yFAEPC,YAAY,EACZC,OAAQ,CACNY,QAAS,CACPd,QAAO,6CACPE,OAAQ,CACNM,YAAW,SAGfO,KAAMjB,IAGVC,SAAUD,EAAmB,WAE/BH,EAAMC,UAAUH,SAAc,IAAES,OAAO,cAAcA,OAAOa,KAC1DpB,EAAMC,UAAUH,QACnB,CAtEC,CAsECC,E,CA1ELsB,EAAOC,QAAUxB,EACjBA,EAASyB,YAAc,WACvBzB,EAAS0B,QAAU,E","sources":["node_modules/refractor/lang/velocity.js"],"sourcesContent":["'use strict'\n\nmodule.exports = velocity\nvelocity.displayName = 'velocity'\nvelocity.aliases = []\nfunction velocity(Prism) {\n  ;(function (Prism) {\n    Prism.languages.velocity = Prism.languages.extend('markup', {})\n    var velocity = {\n      variable: {\n        pattern:\n          /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+\\])*|\\{[^}]+\\})/i,\n        lookbehind: true,\n        inside: {} // See below\n      },\n      string: {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      number: /\\b\\d+\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      operator:\n        /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n      punctuation: /[(){}[\\]:,.]/\n    }\n    velocity.variable.inside = {\n      string: velocity['string'],\n      function: {\n        pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n        lookbehind: true\n      },\n      number: velocity['number'],\n      boolean: velocity['boolean'],\n      punctuation: velocity['punctuation']\n    }\n    Prism.languages.insertBefore('velocity', 'comment', {\n      unparsed: {\n        pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?\\]\\]#/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^#\\[\\[|\\]\\]#$/\n        }\n      },\n      'velocity-comment': [\n        {\n          pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        },\n        {\n          pattern: /(^|[^\\\\])##.*/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        }\n      ],\n      directive: {\n        pattern:\n          /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /^#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})|\\bin\\b/,\n            inside: {\n              punctuation: /[{}]/\n            }\n          },\n          rest: velocity\n        }\n      },\n      variable: velocity['variable']\n    })\n    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest =\n      Prism.languages.velocity\n  })(Prism)\n}\n"],"names":["velocity","Prism1","Prism","languages","extend","velocity1","variable","pattern","lookbehind","inside","string","greedy","number","boolean","operator","punctuation","function","insertBefore","unparsed","alias","directive","keyword","rest","module","exports","displayName","aliases"],"version":3,"file":"velocity.b5da2223.js.map"}
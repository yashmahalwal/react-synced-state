{"mappings":"yiCAAA,aAKA,SAASA,EAAaC,GACpBA,EAAMC,UAAU,iBAAmB,CACjCC,QAAS,CACPC,QAAO,qCACPC,YAAY,EACZC,QAAQ,GAEVC,OAAQ,CACNH,QAAO,sBACPE,QAAQ,GAEVE,UAAW,CAQTJ,QAAO,uEAEPE,QAAQ,EACRG,MAAO,SACPC,OAAQ,CACNC,SAAQ,KACRC,YAAW,IACXC,MAAO,CACLT,QAAO,WACPK,MAAO,YAETK,KAAM,CACJV,QAAO,eACPM,OAAQ,CACNE,YAAW,UAGfG,KAAI,YAGR,gBAAiB,CACfX,QAAO,oBACPK,MAAO,WAETO,MAAO,CACLZ,QAAO,uEAEPK,MAAO,WACPC,OAAQ,CACNC,SAAQ,IACRM,KAAI,mBACJC,OAAM,aACNC,IAAG,WAGPF,KAAM,CAGJb,QAAO,uDACPK,MAAO,YAETW,OAAM,+CACNC,QAAO,sBACPV,SAAQ,yBACRC,YAAW,eAEbX,EAAMC,UAAgB,KAAID,EAAMC,UAAe,IAC7CD,EAAMC,UAAU,gB,CArEpBoB,EAAOC,QAAUvB,EACjBA,EAAawB,YAAc,eAC3BxB,EAAayB,QAAU,E","sources":["node_modules/refractor/lang/excel-formula.js"],"sourcesContent":["'use strict'\n\nmodule.exports = excelFormula\nexcelFormula.displayName = 'excelFormula'\nexcelFormula.aliases = []\nfunction excelFormula(Prism) {\n  Prism.languages['excel-formula'] = {\n    comment: {\n      pattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    reference: {\n      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/\n      // Sales!B2\n      // 'Winter sales'!B2\n      // [Sales.xlsx]Jan!B2:B5\n      // D:\\Reports\\[Sales.xlsx]Jan!B2:B5\n      // '[Sales.xlsx]Jan sales'!B2:B5\n      // 'D:\\Reports\\[Sales.xlsx]Jan sales'!B2:B5\n      pattern:\n        /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        operator: /!$/,\n        punctuation: /'/,\n        sheet: {\n          pattern: /[^[\\]]+$/,\n          alias: 'function'\n        },\n        file: {\n          pattern: /\\[[^[\\]]+\\]$/,\n          inside: {\n            punctuation: /[[\\]]/\n          }\n        },\n        path: /[\\s\\S]+/\n      }\n    },\n    'function-name': {\n      pattern: /\\b[A-Z]\\w*(?=\\()/i,\n      alias: 'keyword'\n    },\n    range: {\n      pattern:\n        /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,\n      alias: 'property',\n      inside: {\n        operator: /:/,\n        cell: /\\$?[A-Z]+\\$?\\d+/i,\n        column: /\\$?[A-Z]+/i,\n        row: /\\$?\\d+/\n      }\n    },\n    cell: {\n      // Excel is case insensitive, so the string \"foo1\" could be either a variable or a cell.\n      // To combat this, we match cells case insensitive, if the contain at least one \"$\", and case sensitive otherwise.\n      pattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,\n      alias: 'property'\n    },\n    number: /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:FALSE|TRUE)\\b/i,\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\n    punctuation: /[[\\]();{}|]/\n  }\n  Prism.languages['xlsx'] = Prism.languages['xls'] =\n    Prism.languages['excel-formula']\n}\n"],"names":["excelFormula","Prism","languages","comment","pattern","lookbehind","greedy","string","reference","alias","inside","operator","punctuation","sheet","file","path","range","cell","column","row","number","boolean","module","exports","displayName","aliases"],"version":3,"file":"excel-formula.e73fe2ba.js.map"}
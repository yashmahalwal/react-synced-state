{"mappings":"yiCAAA,aACA,IAAIA,EAAmBC,EAAQ,gBAI/B,SAASC,EAAMC,GACbA,EAAMC,SAASJ,GACfG,EAAME,UAAUH,MAAQC,EAAME,UAAUC,OAAO,UAAW,CACxDC,QAAS,CACPC,QAAO,wCAETC,QAAO,kTAEPC,aAASC,IAEXR,EAAME,UAAUO,aAAa,QAAS,UAAW,CAC/C,mBAAoB,CAClBJ,QAAO,oDACPK,YAAY,EACZC,OAAQ,CACNC,YAAW,SAIjBZ,EAAME,UAAUW,IAAMb,EAAME,UAAUH,K,CAtBxCe,EAAOC,QAAUhB,EACjBA,EAAMiB,YAAc,QACpBjB,EAAMkB,QAAU,CAAC,M","sources":["node_modules/refractor/lang/idris.js"],"sourcesContent":["'use strict'\nvar refractorHaskell = require('./haskell.js')\nmodule.exports = idris\nidris.displayName = 'idris'\nidris.aliases = ['idr']\nfunction idris(Prism) {\n  Prism.register(refractorHaskell)\n  Prism.languages.idris = Prism.languages.extend('haskell', {\n    comment: {\n      pattern: /(?:(?:--|\\|\\|\\|).*$|\\{-[\\s\\S]*?-\\})/m\n    },\n    keyword:\n      /\\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\\b/,\n    builtin: undefined\n  })\n  Prism.languages.insertBefore('idris', 'keyword', {\n    'import-statement': {\n      pattern: /(^\\s*import\\s+)(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }\n  })\n  Prism.languages.idr = Prism.languages.idris\n}\n"],"names":["refractorHaskell","require","idris","Prism","register","languages","extend","comment","pattern","keyword","builtin","undefined","insertBefore","lookbehind","inside","punctuation","idr","module","exports","displayName","aliases"],"version":3,"file":"idris.a0960d0f.js.map"}
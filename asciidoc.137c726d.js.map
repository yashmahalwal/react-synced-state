{"mappings":"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","sources":["node_modules/refractor/lang/asciidoc.js"],"sourcesContent":["'use strict'\n\nmodule.exports = asciidoc\nasciidoc.displayName = 'asciidoc'\nasciidoc.aliases = ['adoc']\nfunction asciidoc(Prism) {\n  ;(function (Prism) {\n    var attributes = {\n      pattern:\n        /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,\n      lookbehind: true,\n      inside: {\n        quoted: {\n          pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          inside: {\n            punctuation: /^[$`]|[$`]$/\n          }\n        },\n        interpreted: {\n          pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n          inside: {\n            punctuation: /^'|'$/ // See rest below\n          }\n        },\n        string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        variable: /\\w+(?==)/,\n        punctuation: /^\\[|\\]$|,/,\n        operator: /=/,\n        // The negative look-ahead prevents blank matches\n        'attr-value': /(?!^\\s+$).+/\n      }\n    }\n    var asciidoc = (Prism.languages.asciidoc = {\n      'comment-block': {\n        pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n        alias: 'comment'\n      },\n      table: {\n        pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n        inside: {\n          specifiers: {\n            pattern:\n              /(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,\n            alias: 'attr-value'\n          },\n          punctuation: {\n            pattern: /(^|[^\\\\])[|!]=*/,\n            lookbehind: true\n          } // See rest below\n        }\n      },\n      'passthrough-block': {\n        pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^\\++|\\++$/ // See rest below\n        }\n      },\n      // Literal blocks and listing blocks\n      'literal-block': {\n        pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n        }\n      },\n      // Sidebar blocks, quote blocks, example blocks and open blocks\n      'other-block': {\n        pattern:\n          /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n        }\n      },\n      // list-punctuation and list-label must appear before indented-block\n      'list-punctuation': {\n        pattern:\n          /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list-label': {\n        pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'indented-block': {\n        pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n        lookbehind: true\n      },\n      comment: /^\\/\\/.*/m,\n      title: {\n        pattern:\n          /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,\n        alias: 'important',\n        inside: {\n          punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n        }\n      },\n      'attribute-entry': {\n        pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n        alias: 'tag'\n      },\n      attributes: attributes,\n      hr: {\n        pattern: /^'{3,}$/m,\n        alias: 'punctuation'\n      },\n      'page-break': {\n        pattern: /^<{3,}$/m,\n        alias: 'punctuation'\n      },\n      admonition: {\n        pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\n        alias: 'keyword'\n      },\n      callout: [\n        {\n          pattern: /(^[ \\t]*)<?\\d*>/m,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        {\n          pattern: /<\\d+>/,\n          alias: 'symbol'\n        }\n      ],\n      macro: {\n        pattern:\n          /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n        inside: {\n          function: /^[a-z\\d-]+(?=:)/,\n          punctuation: /^::?/,\n          attributes: {\n            pattern: /(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: attributes.inside\n          }\n        }\n      },\n      inline: {\n        /*\nThe initial look-behind prevents the highlighting of escaped quoted text.\nQuoted text can be multi-line but cannot span an empty line.\nAll quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\nFirst, we handle the constrained quotes.\nThose must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\nThey are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\nThen we handle the unconstrained quotes.\nThose do not have the restrictions of the constrained quotes.\nThey are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n*/\n        pattern:\n          /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n        lookbehind: true,\n        inside: {\n          attributes: attributes,\n          url: {\n            pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n            inside: {\n              punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n            }\n          },\n          'attribute-ref': {\n            pattern: /^\\{.+\\}$/,\n            inside: {\n              variable: {\n                pattern: /(^\\{)[a-z\\d,+_-]+/,\n                lookbehind: true\n              },\n              operator: /^[=?!#%@$]|!(?=[:}])/,\n              punctuation: /^\\{|\\}$|::?/\n            }\n          },\n          italic: {\n            pattern: /^(['_])[\\s\\S]+\\1$/,\n            inside: {\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n            }\n          },\n          bold: {\n            pattern: /^\\*[\\s\\S]+\\*$/,\n            inside: {\n              punctuation: /^\\*\\*?|\\*\\*?$/\n            }\n          },\n          punctuation:\n            /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n        }\n      },\n      replacement: {\n        pattern: /\\((?:C|R|TM)\\)/,\n        alias: 'builtin'\n      },\n      entity: /&#?[\\da-z]{1,8};/i,\n      'line-continuation': {\n        pattern: /(^| )\\+$/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    }) // Allow some nesting. There is no recursion though, so cloning should not be needed.\n    function copyFromAsciiDoc(keys) {\n      keys = keys.split(' ')\n      var o = {}\n      for (var i = 0, l = keys.length; i < l; i++) {\n        o[keys[i]] = asciidoc[keys[i]]\n      }\n      return o\n    }\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc(\n      'macro inline replacement entity'\n    )\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro')\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout')\n    asciidoc['table'].inside.rest = copyFromAsciiDoc(\n      'comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation'\n    )\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc(\n      'table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation'\n    )\n    asciidoc['title'].inside.rest = copyFromAsciiDoc(\n      'macro inline replacement entity'\n    ) // Plugin to make entity title show the real entity, idea by Roman Komarov\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n      }\n    })\n    Prism.languages.adoc = Prism.languages.asciidoc\n  })(Prism)\n}\n"],"names":["asciidoc","Prism1","Prism","attributes","pattern","lookbehind","inside","quoted","punctuation","interpreted","string","variable","operator","asciidoc1","languages","alias","table","specifiers","comment","title","hr","admonition","callout","macro","function","inline","url","italic","bold","replacement","entity","copyFromAsciiDoc","keys","o","i","l","split","length","rest","hooks","add","env","type","content","value","replace","adoc","module","exports","displayName","aliases"],"version":3,"file":"asciidoc.137c726d.js.map"}
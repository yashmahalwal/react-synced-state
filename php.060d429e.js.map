{"mappings":"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","sources":["node_modules/refractor/lang/php.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      {\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n        greedy: true,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n        greedy: true,\n        lookbehind: true\n      },\n      /\\b(?:null)\\b/i,\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ]\n    var number =\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator =\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern:\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          // yield from\n          pattern: /(\\byield\\s+)from\\b/i,\n          lookbehind: true\n        }, // `class` is always a keyword unlike other keywords\n        /\\bclass\\b/i,\n        {\n          // https://www.php.net/manual/en/reserved.keywords.php\n          //\n          // keywords cannot be preceded by \"->\"\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n          pattern:\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n          lookbehind: true\n        }\n      ],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern:\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern:\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern:\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern =\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"],"names":["refractorMarkupTemplating","require","php","Prism1","register","Prism","comment","constant","pattern","alias","greedy","lookbehind","number","operator","punctuation","languages","delimiter","variable","package","inside","keyword","function","property","string_interpolation","string","interpolation","insertBefore","attribute","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases"],"version":3,"file":"php.060d429e.js.map"}
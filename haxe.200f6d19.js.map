{"mappings":"2iCAAA,aAKA,SAASA,EAAKC,GACZA,EAAMC,UAAUF,KAAOC,EAAMC,UAAUC,OAAO,QAAS,CACrDC,OAAQ,CAENC,QAAO,yBACPC,QAAQ,GAEV,aAAc,CACZ,CACED,QAAO,mFAEPE,YAAY,G,cAKhBC,QAAO,gUAEPC,SAAU,CACRJ,QAAO,wCACPC,QAAQ,GAEVI,SAAQ,oEAEVT,EAAMC,UAAUS,aAAa,OAAQ,SAAU,CAC7C,uBAAwB,CACtBN,QAAO,yBACPC,QAAQ,EACRM,OAAQ,CACNC,cAAe,CACbR,QAAO,gCACPE,YAAY,EACZK,OAAQ,CACN,4BAA6B,CAC3BP,QAAO,aACPS,MAAO,eAETC,WAAY,CACVV,QAAO,UACPO,OAAQX,EAAMC,UAAUF,QAI9BI,OAAM,cAIZH,EAAMC,UAAUS,aAAa,OAAQ,aAAc,CACjDK,MAAO,CACLX,QAAO,kCACPC,QAAQ,EACRM,OAAQ,CACN,cAAa,YACb,eAAgB,CACdP,QAAO,uBACPE,YAAY,EACZO,MAAO,iBACPF,OAAQX,EAAMC,UAAUc,OAE1B,kBAAiB,eAIvBf,EAAMC,UAAUS,aAAa,OAAQ,UAAW,CAC9CM,aAAc,CACZZ,QAAO,8BACPS,MAAO,YAETI,SAAU,CACRb,QAAO,YACPS,MAAO,UAETK,YAAa,CACXd,QAAO,mBACPS,MAAO,c,CA7EbM,EAAOC,QAAUrB,EACjBA,EAAKsB,YAAc,OACnBtB,EAAKuB,QAAU,E","sources":["node_modules/refractor/lang/haxe.js"],"sourcesContent":["'use strict'\n\nmodule.exports = haxe\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    string: {\n      // Strings can be multi-line\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    'class-name': [\n      {\n        pattern:\n          /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n        lookbehind: true\n      }, // based on naming convention\n      /\\b[A-Z]\\w*/\n    ],\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword:\n      /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n    function: {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n      greedy: true\n    },\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n  })\n  Prism.languages.insertBefore('haxe', 'string', {\n    'string-interpolation': {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{?|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.haxe\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n      greedy: true,\n      inside: {\n        'regex-flags': /\\b[a-z]+$/,\n        'regex-source': {\n          pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^~\\/|\\/$/\n      }\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#(?:else|elseif|end|if)\\b.*/,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /@:?[\\w.]+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'important'\n    }\n  })\n}\n"],"names":["haxe","Prism","languages","extend","string","pattern","greedy","lookbehind","keyword","function","operator","insertBefore","inside","interpolation","alias","expression","regex","preprocessor","metadata","reification","module","exports","displayName","aliases"],"version":3,"file":"haxe.200f6d19.js.map"}